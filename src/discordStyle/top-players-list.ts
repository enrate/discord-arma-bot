import { EmbedBuilder, TextChannel, Client, Message } from 'discord.js';
import { pool } from '../db'; // –£–±—Ä–∞–Ω—ã —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
import { RowDataPacket } from 'mysql2';

export class TopPlayersManager {
    private static readonly EMBED_TITLE = '–¢–æ–ø 20 –∏–≥—Ä–æ–∫–æ–≤:';

    static async update(client: Client, channelId: string) {
        try {
            const channel = await client.channels.fetch(channelId) as TextChannel;
            if (!channel) {
                console.error(`–ö–∞–Ω–∞–ª ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return;
            }

            let message = await this.findLastBotMessage(channel);

            if (!message) {
                message = await this.createNewMessage(channel);
                if (!message) return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            const connection = await pool.getConnection();

                const [topPlayers] = await connection.query<RowDataPacket[]>(
                    `SELECT 
        ps.*, 
        pi.player_name 
     FROM 
        players_stats ps 
     INNER JOIN 
        players_info pi 
     ON 
        ps.id = pi.stats_id
     WHERE 
        ps.top BETWEEN 1 AND 20 
     ORDER BY 
        ps.top ASC 
     LIMIT 20`
                );

                if (topPlayers.length === 0) {
                    throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const listPlayers = topPlayers.map(p => {
    const kd = (p.kills / p.deaths);
    
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
    const positionIcon = 
        p.top === 1 ? 'ü•á' : 
        p.top === 2 ? 'ü•à' : 
        p.top === 3 ? 'ü•â' : 
        `**${p.top}.**`;

    // –¶–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –¥–ª—è K/D
    const kdDisplay = kd >= 4 ? `üî•${kd.toFixed(2)}` : 
                     kd >= 2 ? `‚ö°${kd.toFixed(2)}` : 
                     kd >= 1 ? `üü¢${kd.toFixed(2)}` : 
                     `üîª${kd.toFixed(2)}`;

    return `${positionIcon} **${p.player_name}**\n` +
           `‚ö° ELO:  **${String(p.ppm).padEnd(6, ' ')}` +
           `   ‚öîÔ∏è K/D:  ${kdDisplay.padEnd(5, ' ')}` + 
           `   üéØ ${String(p.kills).padEnd(4, ' ')}` + 
           `   ‚ò†Ô∏è ${p.deaths}`;  
});

const embed = new EmbedBuilder()
    .setTitle('üèÜ –¢–û–ü-20 –ò–ì–†–û–ö–û–í üèÜ')
    .setDescription(listPlayers.length > 0 ? listPlayers.join('\n\n') : 'üéÆ –°–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç')
    .setColor(0xFFD700)
    .setFooter({ text: '‚öîÔ∏è - —É–±–∏–π—Å—Ç–≤–∞/—Å–º–µ—Ä—Ç–∏ | ‚ö° - —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' })
    .setThumbnail('https://i.imgur.com/tyz2EAE.png'); // URL –∏–∫–æ–Ω–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

                await message.edit({ embeds: [embed] });

            } catch (e) {
                console.error('Player list update error:', e);
            }
        }

    private static async findLastBotMessage(channel: TextChannel): Promise<Message | null> {
        try {
            const messages = await channel.messages.fetch({ limit: 10 });
            return messages.find(msg =>
                msg.author.id === channel.client.user?.id &&
                msg.embeds[0]?.title === this.EMBED_TITLE
            ) || null;
        } catch (error) {
            console.error('Error finding message:', error);
            return null;
        }
    }

    private static async createNewMessage(channel: TextChannel): Promise<Message | null> {
        try {
            return await channel.send({
                embeds: [new EmbedBuilder().setTitle(this.EMBED_TITLE)]
            });
        } catch (error) {
            console.error('Error creating new message:', error);
            return null;
        }
    }
}